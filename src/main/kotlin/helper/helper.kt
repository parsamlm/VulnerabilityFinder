package com.parsamlm.helper

import com.google.gson.Gson
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.IOException
import java.util.concurrent.TimeUnit


/**
 * Deserializes a JSON string to an object of the specified type.
 *
 * @param jsonString The JSON string to be deserialized.
 * @return The deserialized object of type T.
 */
internal inline fun <reified T> deserializeJsonToType(jsonString: String): T = Gson().fromJson(jsonString, T::class.java)

/**
 * A class that executes HTTP requests.
 */
internal object HttpRequestExecutor {
    /**
     * Executes an HTTP request to the specified URL and returns the response body as a String.
     *
     * @param url The URL to which the request will be sent.
     * @param apiKey An optional API key to be included in the request header. If null, no API key will be included.
     * @return The response body as a String. If the response body is null, returns an empty String.
     * @throws IOException if an I/O error occurs during the execution of the request.
     */
    @Throws(IOException::class)
    fun run(url: String, apiKey: String? = null): String {
        val client = OkHttpClient.Builder().readTimeout(1, TimeUnit.MINUTES).build()
        val request: Request = Request.Builder().url(url).apply { apiKey?.let { addHeader("apiKey", it) } }.build()
        return client.newCall(request).execute().use { it.body?.string() ?: "" }
    }
}