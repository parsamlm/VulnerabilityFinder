package com.parsamlm.model

/**
 * Data class representing a collection of Vulnerabilities.
 *
 * This class holds the total number of results, the number of results per page, and a mutable set of Vulnerability objects.
 * The totalResults represents the total number of vulnerabilities found.
 * The resultsPerPage represents the number of vulnerabilities displayed per page.
 * The vulnerabilities is a mutable set of Vulnerability objects representing the vulnerabilities found.
 *
 * @property resultsPerPage The number of vulnerabilities displayed per page.
 * @property startIndex The starting index of the vulnerabilities in the current page.
 * @property totalResults The total number of vulnerabilities found.
 * @property format The format of the data received from the NVD.
 * @property version The version of the NVD data feed.
 * @property timestamp The timestamp when the data was fetched from the NVD.
 * @property vulnerabilities A mutable set of Vulnerability objects representing the vulnerabilities found.
 */
data class VulnerabilityPageResponse(
    val resultsPerPage: Int,
    val startIndex: Int,
    val totalResults: Int,
    val format: String,
    val version: String,
    val timestamp: String,
    val vulnerabilities: MutableSet<Vulnerability>
)

/**
 * Data class representing a Vulnerability.
 *
 * This class holds the CVE (Common Vulnerabilities and Exposures) of a Vulnerability.
 * The CVE is an identifier for publicly known cybersecurity vulnerabilities.
 *
 * @property cve The CVE of the Vulnerability.
 */
data class Vulnerability(val cve: Cve)


/**
 * Data class representing a CVE (Common Vulnerabilities and Exposures).
 *
 * This class holds the details of a CVE, including its ID, source identifier, publication date, last modification date, vulnerability status, and other related information.
 *
 * @property id The ID of the CVE.
 * @property sourceIdentifier The source identifier of the CVE.
 * @property published The publication date of the CVE.
 * @property lastModified The last modification date of the CVE.
 * @property vulnStatus The vulnerability status of the CVE.
 * @property cisaExploitAdd The CISA (Cybersecurity and Infrastructure Security Agency) exploit addition date, if available.
 * @property cisaActionDue The CISA action due date, if available.
 * @property cisaRequiredAction The required action according to CISA, if available.
 * @property cisaVulnerabilityName The name of the vulnerability according to CISA, if available.
 * @property descriptions A list of descriptions of the CVE, if available.
 * @property metrics The metrics of the CVE, if available.
 * @property weaknesses A list of weaknesses associated with the CVE.
 * @property configurations A list of configurations associated with the CVE.
 * @property references A list of references associated with the CVE.
 */
data class Cve(
    val id: String,
    val sourceIdentifier: String?,
    val published: String?,
    val lastModified: String?,
    val vulnStatus: String?,
    val cisaExploitAdd: String?,
    val cisaActionDue: String?,
    val cisaRequiredAction: String?,
    val cisaVulnerabilityName: String?,
    val descriptions: List<Description>?,
    val metrics: Metrics?,
    val weaknesses: List<Weakness>?,
    val configurations: List<Configuration>?,
    val references: List<Reference>?
)

/**
 * Data class representing a Description.
 *
 * This class holds the language and value of a Description.
 * The language represents the language in which the description is written.
 * The value is the actual description text.
 *
 * @property lang The language in which the description is written.
 * @property value The actual description text.
 */
data class Description(val lang: String, val value: String)

/**
 * Data class representing the metrics of a CVE.
 *
 * This class holds a list of CVSMetricV2 objects, each representing a CVSS (Common Vulnerability Scoring System) metric of the CVE.
 *
 * @property cvssMetricV2 The list of CVSMetricV2 objects, each representing a CVSS metric of the CVE.
 */
data class Metrics(val cvssMetricV2: List<CVSMetricV2>?)

/**
 * Data class representing a Weakness.
 *
 * This class holds the source, type, and a list of descriptions of a Weakness.
 * The source represents the source from where the weakness was identified.
 * The type represents the type of the weakness.
 * The descriptions is a list of Description objects representing the descriptions of the weakness.
 *
 * @property source The source from where the weakness was identified.
 * @property type The type of the weakness.
 * @property descriptions A list of Description objects representing the descriptions of the weakness.
 */
data class Weakness(val source: String?, val type: String?, val descriptions: List<Description>?)

/**
 * Data class representing a Configuration.
 *
 * This class holds a list of Node objects. Each Node object represents a node in the configuration.
 *
 * @property nodes A list of Node objects representing the nodes in the configuration.
 */
data class Configuration(val nodes: List<Node>?)

/**
 * Data class representing a Reference.
 *
 * This class holds the URL, source, and a list of tags of a Reference.
 * The URL is the URL of the reference.
 * The source is the source from where the reference was obtained.
 * The tags is a list of tags associated with the reference.
 *
 * @property url The URL of the reference.
 * @property source The source from where the reference was obtained.
 * @property tags A list of tags associated with the reference.
 */
data class Reference(val url: String?, val source: String?, val tags: List<String>?)

/**
 * Data class representing a CVSS (Common Vulnerability Scoring System) Metric V2.
 *
 * This class holds the details of a CVSS Metric V2, including its source, type, CVSS data, base severity, exploitability score, impact score, and other related information.
 *
 * @property source The source of the CVSS Metric V2.
 * @property type The type of the CVSS Metric V2.
 * @property cvssData The CVSS data of the CVSS Metric V2.
 * @property baseSeverity The base severity of the CVSS Metric V2.
 * @property exploitabilityScore The exploitability score of the CVSS Metric V2.
 * @property impactScore The impact score of the CVSS Metric V2.
 * @property acInsufInfo A boolean indicating whether there is insufficient access control.
 * @property obtainAllPrivilege A boolean indicating whether all privileges can be obtained.
 * @property obtainUserPrivilege A boolean indicating whether user privileges can be obtained.
 * @property obtainOtherPrivilege A boolean indicating whether other privileges can be obtained.
 * @property userInteractionRequired A boolean indicating whether user interaction is required.
 */
data class CVSMetricV2(
    val source: String?,
    val type: String?,
    val cvssData: CvssData?,
    val baseSeverity: String,
    val exploitabilityScore: Float?,
    val impactScore: Float?,
    val acInsufInfo: Boolean?,
    val obtainAllPrivilege: Boolean?,
    val obtainUserPrivilege: Boolean?,
    val obtainOtherPrivilege: Boolean?,
    val userInteractionRequired: Boolean?
)

/**
 * Data class representing a Node.
 *
 * This class holds the operator, a boolean indicating whether to negate the operation, and a list of CpeMatch objects.
 * The operator represents the operation to be performed.
 * The negate is a boolean indicating whether to negate the operation.
 * The cpeMatch is a list of CpeMatch objects representing the CPE (Common Platform Enumeration) matches.
 *
 * @property operator The operation to be performed.
 * @property negate A boolean indicating whether to negate the operation.
 * @property cpeMatch A list of CpeMatch objects representing the CPE matches.
 */
data class Node(val operator: String?, val negate: Boolean?, val cpeMatch: List<CpeMatch>?)

/**
 * Data class representing the CVSS (Common Vulnerability Scoring System) data.
 *
 * This class holds the details of a CVSS data, including its version, vector string, access vector, access complexity, authentication, confidentiality impact, integrity impact, availability impact, and base score.
 *
 * @property version The version of the CVSS.
 * @property vectorString The vector string of the CVSS.
 * @property accessVector The access vector of the CVSS.
 * @property accessComplexity The access complexity of the CVSS.
 * @property authentication The authentication of the CVSS.
 * @property confidentialityImpact The confidentiality impact of the CVSS.
 * @property integrityImpact The integrity impact of the CVSS.
 * @property availabilityImpact The availability impact of the CVSS.
 * @property baseScore The base score of the CVSS.
 */
data class CvssData(
    val version: String?,
    val vectorString: String?,
    val accessVector: String?,
    val accessComplexity: String?,
    val authentication: String?,
    val confidentialityImpact: String?,
    val integrityImpact: String?,
    val availabilityImpact: String?,
    val baseScore: Float?
)

/**
 * Data class representing a CPE (Common Platform Enumeration) Match.
 *
 * This class holds the vulnerability status, criteria, and match criteria ID of a CPE Match.
 * The vulnerable is a boolean indicating whether the CPE is vulnerable.
 * The criteria is the criteria used for the match.
 * The matchCriteriaId is the ID of the match criteria.
 *
 * @property vulnerable A boolean indicating whether the CPE is vulnerable.
 * @property criteria The criteria used for the match.
 * @property matchCriteriaId The ID of the match criteria.
 */
data class CpeMatch(val vulnerable: Boolean?, val criteria: String?, val matchCriteriaId: String?)
