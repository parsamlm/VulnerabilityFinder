package com.parsamlm

import com.parsamlm.helper.HttpRequestExecutor
import com.parsamlm.helper.deserializeJsonToType
import com.parsamlm.model.VulnerabilityPageResponse
import com.parsamlm.model.Vulnerability

object VF {

    /**
     * Fetches all vulnerabilities from the NVD API.
     *
     * This function fetches all vulnerabilities from the NVD API for a given vendor, type, and version.
     * It uses pagination to fetch all vulnerabilities, and it can optionally filter to find only vulnerable items.
     *
     * @param apiKey The API key to use for the request. If null, no API key is used. [Request an API key from NVD website](https://nvd.nist.gov/developers/request-an-api-key)
     * @param findOnlyVulnerable If true, only fetches items that are vulnerable.
     * @param vendor The vendor of the product for which to fetch vulnerabilities.
     * @param type The type of the product for which to fetch vulnerabilities.
     * @param version The version of the product for which to fetch vulnerabilities.
     * @return A set of all fetched vulnerabilities.
     */
    fun fetchAllVulnerabilities(
        apiKey: String? = null,
        findOnlyVulnerable: Boolean = false,
        vendor: String,
        type: String,
        version: String
    ): Set<Vulnerability> {
        val vulnerabilities = mutableSetOf<Vulnerability>()
        var resultsPerPage = 0
        var totalResults: Int
        do {
            val response = fetchVulnerabilitiesPage(
                apiKey = apiKey,
                findOnlyVulnerable = findOnlyVulnerable,
                vendor = vendor,
                type = type,
                version = version,
                startIndex = resultsPerPage
            )
            val vulnerabilityPageResponse = deserializeJsonToType<VulnerabilityPageResponse>(response)
            vulnerabilities.addAll(vulnerabilityPageResponse.vulnerabilities)
            resultsPerPage += vulnerabilityPageResponse.resultsPerPage
            totalResults = vulnerabilityPageResponse.totalResults
        } while (totalResults > resultsPerPage)
        return vulnerabilities
    }
}

private fun fetchVulnerabilitiesPage(
    apiKey: String? = null,
    findOnlyVulnerable: Boolean = false,
    vendor: String,
    type: String,
    version: String,
    startIndex: Int = 0
): String {
    val url = "https://services.nvd.nist.gov/rest/json/cves/2.0" +
            "?cpeName=cpe:2.3:a:$vendor:$type:$version&startIndex=$startIndex${if (findOnlyVulnerable) "&isVulnerable=" else ""}"
    return HttpRequestExecutor.run(url = url, apiKey = apiKey)
}

