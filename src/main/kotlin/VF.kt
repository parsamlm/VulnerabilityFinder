package com.parsamlm

import com.parsamlm.helper.HttpRequestExecutor
import com.parsamlm.helper.deserializeJsonToType
import com.parsamlm.model.Vulnerabilities
import com.parsamlm.model.Vulnerability

object VF {
    /**
     * Retrieves all vulnerabilities from the NVD (National Vulnerability Database).
     *
     * This function retrieves all vulnerabilities related to a specific product from the NVD.
     * The product is specified by the vendor, type, and version parameters.
     * The function can also be configured to retrieve only vulnerabilities that are currently open by setting the findOnlyVulnerable parameter to true.
     * The function uses a do-while loop to retrieve all vulnerabilities in pages, as the NVD API has a limit on the number of vulnerabilities that can be retrieved in a single request.
     * The function returns a set of Vulnerability objects.
     *
     * @param findOnlyVulnerable A boolean indicating whether to retrieve only open vulnerabilities. Defaults to false.
     * @param vendor The vendor of the product.
     * @param type The type of the product.
     * @param version The version of the product.
     * @return A set of Vulnerability objects representing all vulnerabilities related to the specified product.
     */
    fun fetchAllVulnerabilities(
        apiKey: String? = null,
        findOnlyVulnerable: Boolean = false,
        vendor: String,
        type: String,
        version: String
    ): Set<Vulnerability> {
        val vulnerabilities = mutableSetOf<Vulnerability>()
        var resultsPerPage = 0
        var totalResults: Int
        do {
            val response = fetchVulnerabilitiesPage(
                apiKey = apiKey,
                findOnlyVulnerable = findOnlyVulnerable,
                vendor = vendor,
                type = type,
                version = version,
                startIndex = resultsPerPage
            )
            val vulnerabilitiesObj = deserializeJsonToType<Vulnerabilities>(response)
            vulnerabilities.addAll(vulnerabilitiesObj.vulnerabilities)
            resultsPerPage += vulnerabilitiesObj.resultsPerPage
            totalResults = vulnerabilitiesObj.totalResults
        } while (totalResults > resultsPerPage)
        return vulnerabilities
    }

}

private fun fetchVulnerabilitiesPage(
    apiKey: String? = null,
    findOnlyVulnerable: Boolean = false,
    vendor: String,
    type: String,
    version: String,
    startIndex: Int = 0
): String {
    val url = "https://services.nvd.nist.gov/rest/json/cves/2.0" +
            "?cpeName=cpe:2.3:a:$type:$type:$version&startIndex=$startIndex${if (findOnlyVulnerable) "&isVulnerable=" else ""}"
    return HttpRequestExecutor.run(url = url, apiKey = apiKey)
}

